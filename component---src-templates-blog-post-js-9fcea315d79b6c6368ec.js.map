{"version":3,"file":"component---src-templates-blog-post-js-9fcea315d79b6c6368ec.js","mappings":"2QAAyC,IAEpBA,EAAQ,SAAAC,GAEzB,SAAAD,EAAYE,GAAQ,IAADC,EAEqB,OADpCA,EAAAF,EAAAG,KAAA,KAAMF,IAAM,MACPG,WAAaC,EAAAA,YAAkBH,CACxC,EAACI,EAAAA,EAAAA,GAAAP,EAAAC,GAAA,IAAAO,EAAAR,EAAAS,UAqBA,OArBAD,EAEDE,kBAAA,WACI,IAAIC,EAAWC,SAASC,cAAc,UACtCF,EAASG,aAAa,MAAO,iCAC7BH,EAASG,aAAa,cAAe,aACrCH,EAASG,aAAa,SAAS,GAC/BH,EAASG,aAAa,OAAQ,0CAC9BH,EAASG,aAAa,aAAc,YACpCH,EAASG,aAAa,QAAS,gBAC/BC,KAAKV,WAAWW,QAAQC,YAAYN,EACxC,EAACH,EAEDU,OAAA,WACI,OACIZ,EAAAA,cAAA,OAAKa,GAAG,WAAWC,UAAU,uBACzBd,EAAAA,cAAA,MAAIc,UAAU,QAAO,YAAU,IAC/Bd,EAAAA,cAAA,MAAIc,UAAU,SACdd,EAAAA,cAAA,OAAKe,IAAKN,KAAKV,WAAYe,UAAU,gBAGjD,EAACpB,CAAA,CA1BwB,CAASsB,EAAAA,WCOtC,MA2DaC,EAAOC,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQH,EACrD,OACElB,EAAAA,cAACsB,EAAAA,EAAG,CACFC,MAAOF,EAAKG,YAAYD,MACxBE,YAAaJ,EAAKG,YAAYC,aAAeJ,EAAKK,SAClD,EAIN,MApEyBC,IAGlB,IAADC,EAAA,IAFJT,MAAM,SAAEU,EAAQ,KAAEC,EAAI,KAAEC,EAAMX,eAAgBC,GAAM,SACpDW,GACDL,EACC,MAAMM,GAA6B,QAAjBL,EAAAG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBL,QAAS,QACxCY,GAAoBC,EAAAA,EAAAA,GAASf,EAAKG,YAAYa,cAAcC,KAElE,OACEtC,EAAAA,cAACuC,EAAAA,EAAM,CAACP,SAAUA,EAAUT,MAAOU,GACjCjC,EAAAA,cAAA,WACEc,UAAU,YACV0B,WAAS,EACTC,SAAS,6BAETzC,EAAAA,cAAA,cACEA,EAAAA,cAAC0C,EAAAA,EAAW,CAACC,MAAOR,EAAmBS,IAAKvB,EAAKG,YAAYa,cAAcO,MAC3E5C,EAAAA,cAAA,MAAI6C,SAAS,YAAYxB,EAAKG,YAAYD,OAC1CvB,EAAAA,cAAA,SAAIqB,EAAKG,YAAYsB,OAEvB9C,EAAAA,cAAA,WACE+C,wBAAyB,CAAEC,OAAQ3B,EAAK4B,MACxCJ,SAAS,gBAEX7C,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACkD,EAAAA,EAAG,QAGRlD,EAAAA,cAAA,OAAKc,UAAU,iBACbd,EAAAA,cAAA,MACEmD,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGXxD,EAAAA,cAAA,UACG6B,GACC7B,EAAAA,cAACyD,EAAAA,KAAI,CAACC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QAAO,KACtChC,EAASL,YAAYD,QAI9BvB,EAAAA,cAAA,UACG8B,GACC9B,EAAAA,cAACyD,EAAAA,KAAI,CAACC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKN,YAAYD,MAAM,SAMlCvB,EAAAA,cAACN,EAAQ,MACF,C","sources":["webpack://daniel-talks-code/./src/components/comments.js","webpack://daniel-talks-code/./src/templates/blog-post.js"],"sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Comments extends Component {\n\n    constructor(props) {\n        super(props);\n        this.commentBox = React.createRef();\n    }\n\n    componentDidMount () {\n        let scriptEl = document.createElement(\"script\");\n        scriptEl.setAttribute(\"src\", \"https://utteranc.es/client.js\");\n        scriptEl.setAttribute(\"crossorigin\", \"anonymous\");\n        scriptEl.setAttribute(\"async\", true);\n        scriptEl.setAttribute(\"repo\", \"danpgomez/danieltalkscode.com-comments\");\n        scriptEl.setAttribute(\"issue-term\", \"pathname\");\n        scriptEl.setAttribute(\"theme\", \"github-light\");\n        this.commentBox.current.appendChild(scriptEl);\n    }\n\n    render() {\n        return (\n            <div id=\"comments\" className=\"comment-box-wrapper\">\n                <h1 className=\"mb-0\">Comments {''}</h1>\n                <hr className=\"my-0\"/>\n                <div ref={this.commentBox} className=\"comment-box\"/>\n            </div>\n        );\n    }\n}\n\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Comments from \"../components/comments\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const postFeaturedImage = getImage(post.frontmatter.featuredImage.src)\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <GatsbyImage image={postFeaturedImage} alt={post.frontmatter.featuredImage.alt}/>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <Comments />\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        featuredImage {\n          src {\n            childImageSharp {\n              gatsbyImageData(\n                aspectRatio: 1.7\n                placeholder: BLURRED\n                blurredOptions: {width: 100}\n                transformOptions: {cropFocus: CENTER}\n                formats: AUTO\n              )\n            }\n          }\n          alt\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Comments","_Component","props","_this","call","commentBox","React","_inheritsLoose","_proto","prototype","componentDidMount","scriptEl","document","createElement","setAttribute","this","current","appendChild","render","id","className","ref","Component","Head","_ref2","data","markdownRemark","post","Seo","title","frontmatter","description","excerpt","_ref","_site$siteMetadata","previous","next","site","location","siteTitle","siteMetadata","postFeaturedImage","getImage","featuredImage","src","Layout","itemScope","itemType","GatsbyImage","image","alt","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}